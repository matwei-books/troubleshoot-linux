# Fehlersuche bei Linux Servern und Netzwerken

## Bestandteile des Buches

### Methoden, Heuristiken, Modelle

Methode
:   (Duden)

    1.   auf einem Regelsystem aufbauendes Verfahren zur Erlangung von
         [wissenschaftlichen] Erkenntnissen oder praktischen Ergebnissen

    2.   Art und Weise eines Vorgehens

Heuristik
:   (Duden)

    Lehre, Wissenschaft von den Verfahren, Probleme zu lösen; methodische
    Anleitung, Anweisung zur Gewinnung neuer Erkenntnisse

heuristisches Prinzip
:   (Duden)

    Arbeitshypothese, vorläufige Annahme als Hilfsmittel der Forschung,
    Untersuchung, Erklärung

methodisch
:   (Duden)

    1.  die Methode(1) betreffend

    2.  eine Methode zugrunde legend, nach einer Methode vorgehend

In diesem Buch bezeichne ich **Medhoden** als Verfahren, die auf Regeln beruhen
und immer zu einem Ergebnis führen, aber nur unter bestimmten Voraussetzungen
anwendbar sind.
**Heuristiken** sind in diesem Buch Verfahren um Erkenntnisse zu gewinnen, die
fast immer anwendbar sind, deren Erkenntnisse aber nicht immer direkt für die
Problemlösung nutzbar sind.
Die Übergänge sind fließend.

*   *Polya* einarbeiten

Ein Modell ist eine vereinfachte Darstellung eines Systems, das wesentliche,
momentan benötigte Eigenschaften mit dem System teilt. Für das gleiche System
kann man unterschiedliche Modelle verwenden, jenachdem, welche Eigenschaften
man näher untersuchen will.

*   Hinweis auf OSI-Modell für Netzwerkschichten

### Herangehensweisen

*   Arbeitsbuch, Laborjournal, (http://bulletjournal.com)

*   abgewandelt: vier Kraftprinzipien aus WT

*   Gehirn: L-Modus, R-Modus (*Edwards*):

    *   (L): verbales Denken, logisch, analytisch

    *   (R): nonverbales Denken, Gestaltwahrnehmung

    *   Umschaltung zwischen den Hemisphären, Verweis auf *Edwards*

        *   auf dem Kopf zeichnen

	*   blindes Konturenzeichnen

*   Gehirn: (*Kahnemann*)

    System 1
    : automatisch, schnell, wenig Aufwand, kein Sinn für willentliche
      Steuerung, spontane Reflexe, Gewohnheiten

    System 2
    : leitet Aufmerksamkeit auf aufwendige mentale Aktivitäten, die das
      erfordern, z.B. komplexe Berechnungen, Verwaltung (?, agency), Auswahl,
      Konzentration

    System 1 kann uns blitzschnell zur richtigen Lösung oder in die Irre
    führen.

    System 2 hat ein Vetorecht bei Entscheidungen.

    *   **Training**, Einfluss auf System 1, für höchste Effektivität unter
        Kontrolle von System 2

    *   **Gewohnheiten**

        *   verlagern Entscheidungen von System 2 zu System 1 (gute, wie
	    schlechte)

        *   können geändert werden (mit Hilfe und unter Kontrolle von System 2)

*   andere fragen (aber: Selber denken macht schlau)

    *   Google

    *   Foren, Mailinglisten

    *   Kollegen

*   Auswertung von Systemlogs, Konsolenmeldungen, etc.

### Nachbearbeitung

Manchmal folgt auf ein gelöstes Probelem schon das nächste und es bleibt kaum
Zeit für eine Rückschau. Tritt das häufig auf, ist das ein Zeichen, dass eine
Rückschau umso nötiger ist. Dann kann ich wenigstens eine Tabelle anlegen, in
der ich die Fehler aufliste, zusammen mit ihrem Schweregrad. Anhand dieser
Tabelle kann ich dann entscheiden, welche Art von Fehlern den meisten Aufwand
verursachen und daher die meiste Beachtung verdienen.

Nachdem ich das Problem gelöst habe, kontrolliere ich, ob es wirklich behoben
ist. Das heißt in allererster Linie, dass ich denjenigen, der mir das Problem
gemeldet hat, um Bestätigung bitte, dass das Problem behoben ist.

Spätesten jetzt ergänze ich mein Laborbuch mit den Erkenntnissen, die ich bei
der Problemlösung gewonnen habe. Eventuell schreibe ich einen Artikel darüber,
um schon durch das Ausformulieren diese Erkenntnisse tiefer in meinem
Gedächtnis zu verankern.

In der Rückschau kann ich mich fragen, auf welchem anderen Weg ich dieses
Problem eingrenzen könnte. Gibt es möglicherweise einen schnelleren Weg, der
mich zur Lösung geführt hätte. Kann ich diesen oder den angewandten Lösungsweg
eventuell für andere Probleme einsetzen? Wenn ja, für welche? Wie kann ich die
gewonnenen Kenntnisse verallgemeinern.

Die nächste Frage führt mich zu einem tieferen Verständnis des Systems.
Ich frage zunächst nach allen unmittelbaren Ursachen für das Problem.
Als nächstes frage ich warum es diese Ursachen gibt.
Dann nach deren Ursachen.
In dem ich (mindestens) fünf mal warum frage, komme ich zu Erkenntnissen über
das Gesamtsystem, die vordergründig nichts mit diesem Problem zu tun haben,
mir aber helfen das System besser zu verstehen
Für die Zukunft kann ich dieses Problem dann vielleicht vermeiden oder
schneller erkennen.

Wenn ich den Fehler in der Rückschau soweit durchgekaut habe, kann ich
vielleicht die Frage beantworten, ob ich den Fehler hätte vorhersehen können.
Falls ja, kläre ich wie, welche Voraussetzungen ich dafür schaffen müßte, zum
Beispiel durch Monitoring, regelmäßige Logauswertung.

Wenn ich meine Kollegen schulen will, kann ich mir Gedanken machen, wie ich
diesen Fehler in einem Testsystem hervorrufen kann, um eine möglichst
realistische Trainingsumgebung zu schaffen, in der das Problem und seine
Auswirkungen untersucht werden können.

Schließlich, wenn ich alle Mittel zur Verfügung habe, um auftretende Fehler
bereits im Entstehen zu erkennen und präventiv zu verhindern, kann ich mir
Gedanken machen, ob das vielleicht automatisierbar ist. Das ist aber nur der
letzte Schritt auf dem langen Weg von der erstmaligen Analyse eines Fehlers
über das schnelle Erkennen und mögliche Vorhersagen bis zum selbstständigen
Heilen eines Fehlers.

### Rechner-Totalausfall

Ein Totalausfall eines Rechners bedeutet für mich, der Rechner selbst ist
keine große Hilfe bei der Fehlersuche. Das muss nicht heißen, dass der Rechner
überhaupt nicht mehr reagiert, aber auf jeden Fall stehen mir nicht alle
Werkzeuge zur Verfügung, die ich sonst zur Analyse einsetzen könnte.

Die folgenden Probleme betrachte ich als Totalausfall eines Rechners.

*   Hardwarefehler, der Rechner reagiert überhaupt nicht beim Einschalten.
    Abgesehen vom überprüfen des Stromanschlusses gehe ich darauf hier nicht
    weiter ein. Wenn nur einzelne Komponenten ausgefallen sind, kann ich
    versuchen ein Livesystem von CD-ROM oder USB zu starten und damit das
    System zu analysieren.

*   Boot-Probleme, zwar passiert etwas, die Hardware scheint größtenteils in
    Ordnung, aber das Betriebssystem wird nicht gestartet. Hier analysiere ich
    den Bootprozess Schritt für Schritt, beobachte, wie weit das System kommt
    und versuche die Ursache zu ermitteln.

*   Der Rechner ist normal gestartet, hat auch eine Zeitlang (mitunter Wochen)
    gearbeitet, aber reagiert jetzt nicht mehr.
    Hier versuche ich, den Rechner mit SysRequest wieder in einen definierten
    Zustand zu bringen und dann zu analysieren. Falls möglich, werte ich die
    mit SysRequest gewonnenen Erkenntnisse aus.

*   Überlast, Swapping, Thrashing. Ich sehe oder höre, dass der Rechner
    intensiv arbeitet. Trotzdem reagiert er sehr langsam. Eventuell kann ich
    mich auf Grund von Timeouts nicht mal anmelden. Dann bleibt mir nur, den
    Rechner geordnet runter zu fahren und anschließend zu ermitteln, welche
    Prozesse die Ressourcen überlastet haben.

*   Ausfall bei virtuellen Maschinen. Im Grunde genommen können die gleichen
    Probleme wie bei "echten" Maschinen aus Blech auftreten. Hinzu kommen
    Probleme mit der der Virtualisierungsschicht, zum Beispiel dem verwendeten
    Bootloader. Neben der gestiegenen Komplexität mit mehr Möglichkeiten für
    Fehler habe ich zusätzliche Diagnosemöglichkeiten.

    Ich betrachte hier zwei verschiedene Arten von Totalausfällen: Den Ausfall
    des Virtualisierungs-Hostes, davon sind alle Gastsysteme betroffen. Und
    den Ausfall eines Gastsystems.

    Wenn der Host betroffen ist, kann ich versuchen, das Problem mit einem
    Livesystem zu analysieren, falls das möglich ist.

    Bei Problemen mit Gastsystemen sind meine Optionen abhängig von der
    verwendeten Virtualisierungslösung und deren Diagnosewerkzeugen.

### Rechner-Teilausfall

*   Mount-Fehler

*   Berechtigungen

*   Dienst startet nicht

*   Platte voll

*   *My first five minutes on a server* verarbeiten

*   ein Dienst wartet auf den anderen (Abhängigkeiten, init)

### Rechner-Performanceprobleme

Die Performance eines Rechners betrachte ich, wenn zwar alles funktioniert,
aber die Benutzer trotzdem nicht zufrieden sind, weil das System nur langsam
reagiert, Jobs zu lange zur Abarbeitung benötigen.
Mangelnde Performance kann auf Dauer zur Ablehnung des Systems führen.
Das Ziel ist, dass Benutzer nicht ausgebremst werden und alle Jobs rechtzeitig
fertig werden.
Das kann neben der Suche nach und der Eliminierung von Performancebremsen auch
die Erziehung der Benutzer oder Programmierer umfassen, indem ich diese auf
ressourcenhungrige Aktionen hinweist.

Die wesentlichsten Performancebremsen sind CPU, Hauptspeicher, I/O, schlechte
Algorithmen/Programmierung, übergroße Jobs.

Schlechte Algorithmen lassen sich ohne Kenntnis der eingesetzten Software
schlecht nachweisen und um übergroße Jobs zu identifizieren ist man mitunter
auch auf die Mithilfe der betreffenden Anwendungssoftware angewiesen, so dass
ich darauf nicht näher eingehen will.
Für die anderen Performancebremsen gibt es Bordmittel, die mir bei der Suche
helfen.

### Werkzeuge zur lokalen Fehlersuche

*   Shell {#sec-lokal-werkzeuge-shell}

*   busybox {#sec-lokal-werkzeuge-busybox}

*   perl {#sec-lokal-werkzeuge-perl}

*   fuser {#sec-lokal-werkzeuge-fuser}

*   lsof {#sec-lokal-werkzeuge-lsof}

*   netstat {#sec-lokal-werkzeuge-netstat}

*   iproute {#sec-lokal-werkzeuge-iproute}

*   strace {#sec-lokal-werkzeuge-strace}

*   ltrace {#sec-lokal-werkzeuge-ltrace}

*   GDB der GNU Debugger {#sec-lokal-werkzeuge-gdb}

*   vmstat {#sec-lokal-werkzeuge-vmstat}

*   sysstat {#sec-lokal-werkzeuge-sysstat}

*   acct {#sec-lokal-werkzeuge-acct}

*   bonnie++ {#sec-lokal-werkzeuge-bonnie}

*   hdparm {#sec-lokal-werkzeuge-hdparm}

### Netzwerk-Totalausfall

Wenn ich einen Netzwerk-Totalausfall diagnostiziert habe, gilt es als erstes,
überhaupt Kontakt zu einem Netzwerk zu bekommen.
Ohne Zugang zum Netz habe ich gar keine Chance, irgendeines der anderen
Probleme zu analysieren.

Ich arbeite mich im OSI-Modell von unten nach oben vor, überprüfe die
SChichten und versuche, sie in Betrieb zu nehmen.

*   Bitübertragung (physical)

*   Sicherung (data link)

*   Vermittlung (network)

*   Transport (transport)

### Netzwerk-Teilausfall

*   verschiedene Formen:

    *   einzelne Netzsegmente sind nicht zu erreichen

    *   einzelne Dienste sind nicht zu erreichen

*   gemeinsame Strategien

    Tests:

    *   Anfang, Endpunkte der Verbindung

    *   Pfad kontrollieren (Bisektion anwendbar?)

*   Unterschiede:

    *   nicht erreichbares Netzsegment:

        *   Kontrolle der Routen (Routingprotokolle, Kerneltabellen, Gateways)

	*   (halb)automatische Tests mit traceroute

    *   nicht erreichbarer Dienst:

        *   Kontrolle der Firewallregeln, Paketfilter

	*   geht eventuell in lokale Fehlersuche über

### Netzwerk-Performanceprobleme

*   mögliche Ursachen:

    *   Paketverluste (schlechte Leitung, überlastete Leitung, überlastetes
	Gateway)

    *   DNS-Probleme

    *   falsche Route bei Multipath

    *   hohe Latenz (verursacht durch Leitung (Bandbreite) oder durch
	Pufferung)

    *   viel unnötiger Datenverkehr

*   Messungen

    *   Bandbreite (mit ping, siehe *Sloan* S. 81ff)

    *   Latenz (mit Ping)
        *   ohne Last
        *   mit Last, um Pufferprobleme aufzudecken

    *   Durchsatz

    *   Verkehrsanalyse (Netflow)

*   Maßnahmen

    *   Auswechseln der überlasteten Hardware

    *   bessere Leitungen anmieten/kaufen/verlegen

    *   Qos

    *   Traffic reduzuieren (Proxy-Server, ...), vorher Traffic analysieren

    *   Software anpassen

        *   Entwickler zugänglich?

	*   Einstellungen an der Software, die Latenz berücksichtigen?

### Werkzeuge zur Netzwerkfehlersuche

*   arp {#sec-netz-werkzeuge-arp}

*   bridge-utils {#sec-netz-werkzeuge-bridge-utils}

*   ifconfig {#sec-netz-werkzeuge-ifconfig}

*   iproute {#sec-netz-werkzeuge-iproute}

*   netstat {#sec-netz-werkzeuge-netstat}

*   route {#secr-netz-werkzeuge-route}

*   ethtool, mii-diag, mii-tools {#sec-netz-werkzeuge-ethtool}

*   ping {#sec-netz-werkzeuge-ping}

*   traceroute {#sec-netz-werkzeuge-traceroute}

*   tcpdump {#sec-netz-werkzeuge-tcpdump}

*   wireshark {#sec-netz-werkzeuge-wireshark}

*   libtrace und libtrace-tools {#sec-netz-werkzeuge-librace}

*   quagga {#sec-netz-werkzeuge-quagga}

*   telnet {#sec-netz-werkzeuge-telnet}

*   netcat {#sec-netz-werkzeuge-netcat}

*   openssl

*   samba, smbclient {#sec-netz-werkzeuge-smbclient}

*   iperf, nttcp, nuttcp {#sec-netz-werkzeuge-iperf}

*   perl {#sec-netz-werkzeuge-perl}

