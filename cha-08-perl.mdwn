
## perl {#sec-lokal-werkzeuge-perl}

Zwischen den vielen Spezialwerkzeugen für die Fehlersuche und der Shell als
Kommandozentrale benötige ich hin und wieder ein Werkzeug, mit dem sich auch
kniffligere Probleme angehen lassen, die so vielleicht vorher noch gar nicht
untersucht worden sind. Etwas, das sich etwa so schnell wie die Shell
programmieren läßt, aber ausdrucksstärker ist und auch sehr komplexe
Probleme angehen kann. Für mich ist das Perl. Für andere vielleicht Python,
das in vielem Perl ähnlich nicht, aber auf keinem Fall in der Syntax.

Die Programmiersprache Perl umfasst Konzepte von einfachen Werkzeugen wie sed
oder awk bis hin zu anspruchsvollen Programmiersprachen wie C oder Lisp. Es
gibt umfangreiche Fachliteratur sowohl offline als auch online sowie
Communities, an die man sich bei Problemen wenden kann.

Was Perl aber heraushebt gegenüber vielen anderen Skriptsprachen ist CPAN,
das Comprehensive Perl Archive Network, ein so umfangreiches Reservoir an
Softwaremodulen für fast alle erdenklichen Zwecke, das es möglich macht, die
meisten Skripts auf wenige Zeilen zu beschränken. Die besten und meist
verwendeten Module schaffen es mit der Zeit in die Standarddistribution und
stehen dann nach der Installation von Perl gleich zur Verfügung. In vielen
Fällen muß Perl auch gar nicht installiert werden, weil es bereits
Bestandteil des Systems ist.

Ganz besonders hilfreich bei der Problemlösung mit Perl ist das Perl
Kochbuch von Tom Christiansen und Nathan Torkington
[CT2000](#bib-ct2000). In diesem sind Lösungen
für viele Probleme in Rezeptform aufbereitet und vor allen Dingen erläutert.
Die Codebeispiele aus dem Kochbuch sind Online verfügbar, den meisten Wert
zieht man jedoch aus den Erläuterungen im Buch.

### Syslog auswerten

Es kommt immer mal wieder, dass ich die Zeilen in den Systemprotokollen
miteinander verknüpfen muss, um eine ganz spezielle Auswertung zu bekommen.
Finde ich kein geeignetes Programm, beginne ich mit folgendem Fragment, dass
ich dann für die Lösung meines konkreten Problems ausbaue:
  
<<[read-syslog.pl](code/read-syslog.pl)

In Zeile 3 gebe ich den Prozess an, an dessen Logzeilen ich interessiert
bin. Sind es mehrere Prozesse, muss ich gegebenenfalls die Zeile 21
anpassen.

Die Zeilen 4-13 definieren einen regulären Ausdruck mit dessen Hilfe ich
die Protokollzeilen aufspalte in die angegebenen Bestandteile.

Die Zeitfelder fasse ich in der Funktion `utctime()` zu einer Zahl
zusammen. Als Jahr nimmt das Skript das aktuelle an, dieses wird in zeile 14
ermittelt.

In Funktion `process_line()` kann ich die gesamte
Auswertelogik für die Protokollzeilen schreiben und dabei auf die bereits
separierten allgemeinen Felder und die eigentliche Nachricht zurückgreifen.

